name: Release CI

on:
  push:
    branches:
      - master #    tags:
#      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-chatgpt:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
#          - build: linux
#            os: ubuntu-latest
#            arch: x86_64
#            target: x86_64-unknown-linux-gnu
          - build: windows
            os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

#      - uses: pnpm/action-setup@v2
#        name: Install pnpm
#        id: pnpm-install
#        with:
#          version: 7
#          run_install: false

#      - name: Install Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#          cache: pnpm
#      - run: pnpm install --frozen-lockfile

      - name: 'Setup Rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libayatana-appindicator3-dev librsvg2-dev patchelf

#      - name: Build FE
#        run: pnpm build:fe

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

#      - name: fix tray icon
#        if: matrix.os != 'macos-latest'
#        run: |
#          pnpm fix:tray

#      - run: pnpm build --target ${{ matrix.target }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
#          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - run: cd src-tauri && cargo build

      - run: ls -lR ./

#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'windows-latest'
#        with:
#          name: artifacts-${{ matrix.arch }}
#          path: |
#            ./target/${{ matrix.target }}/release/bundle/msi/**

      - name: Delete older release
        uses: dev-drprasad/delete-older-releases@v0.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          keep_latest: 0

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: myhome2-0.0.1-SNAPSHOT.jar
          release_name: myhome2-0.0.1-SNAPSHOT.jar
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./target/myhome2-0.0.1-SNAPSHOT.jar
          asset_name: myhome2-0.0.1-SNAPSHOT.jar
          asset_content_type: application/zip


      - name: Webhook
        if: always()
        uses: SuCicada/su-action-webhook@latest
        with:
          url: ${{secrets.WEBHOOK_URL}}
          job: ${{toJSON(job)}}
          github: ${{toJSON(github)}}
